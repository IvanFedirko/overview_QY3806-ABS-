
namespace EncoderQY3806
{
    public static class Crc8
    {
        public static byte Calculate(byte[] data, int byteLength)
        {
            //определяется как 8 бит, которые будут генерироваться в сообщении до тех пор, пока не будет
            //генерируется окончательный crc. 
            byte crc;
            //Byteidx — счетчик для сравнения байтов, используемых для расчета CRC.
            byte Byteidx, Bitidx;
            ///Первоначально остаток CRC должен быть установлен с исходным начальным числом (0xFF для TLE5012B).
            crc = 0xFF;
            //Для всех байтов сообщения.
            for (Byteidx = 0; Byteidx < byteLength; Byteidx++)
            {
                //crc вычисляется как операция XOR из предыдущего crc и «сообщения».
                crc ^= data[Byteidx];
                //Для каждой битовой позиции в 8-битном слове
                for (Bitidx = 0; Bitidx < 8; Bitidx++)
                {
                    //Если старший бит crc равен 1 (с маской &0x80 мы получаем старший бит crc).
                    if ((crc & 0x80) != 0)
                    {
                        // crc продвигается на позицию (crc перемещается на 1 бит влево: старший бит (MSB) удаляется, так как он
                        //будет отменено первым полиномом генератора и новым битом
                        //из «сообщения» принимается младший бит (LSB).)
                        crc <<= 1;
                        //crc вычисляется как операция XOR из предыдущего crc и генератора
                        //полином (0x1D для Accnt). Имейте в виду, что здесь бит x8 не берется, так как
                        //старший бит crc уже был удален на предыдущем шаге.
                        crc ^= 0x1D;
                    }
                    //В случае, если CRC MSB равен 0.
                    else
                        //crc перемещается на одну позицию (этот шаг необходим для того, чтобы операция XOR выполнялась только
                        //когда полином генератора выравнивается со старшим битом (MSB) сообщения, равным «1».
                        crc <<= 1;
                }
            }
            //Возвращаем инвертированный остаток crc — оператор инвертирования). Альтернатива
            // для оператора  будет операция XOR между crc и полиномом 0xFF.
            return (byte)(~crc);
        }
    }
}
